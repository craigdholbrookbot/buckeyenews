name: Pull transcripts (daily)

permissions:
  contents: write

on:
  schedule:
    - cron: "30 10 * * *"   # 6:30 AM ET
  workflow_dispatch:
  push:
    paths:
      - 'channels_*.txt'
      - '.github/workflows/transcribe.yml'

concurrency:
  group: transcripts
  cancel-in-progress: true

jobs:
  build-transcripts:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      matrix:
        category: [mainstream, insider, recruiting]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yt-dlp and ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          python3 -m pip install --upgrade yt-dlp

      - name: Prep folders
        run: mkdir -p transcripts/${{ matrix.category }}

      - name: Show channel list
        run: |
          echo "=== channels_${{ matrix.category }}.txt ==="
          if [ -f "channels_${{ matrix.category }}.txt" ]; then
            nl -ba channels_${{ matrix.category }}.txt
          else
            echo "MISSING channels_${{ matrix.category }}.txt" && exit 1
          fi

      - name: Fetch latest video IDs (past 48h for bootstrap)
        env:
          WINDOW: "now-2days"  # after success, change to now-1day
          MAX_PER_CHANNEL: "6"
        run: |
          : > ids_${{ matrix.category }}.txt
          while read -r ch; do
            [ -z "$ch" ] && continue
            echo "Channel: $ch"
            # Pull at most $MAX_PER_CHANNEL IDs from the time window
            yt-dlp \
              --flat-playlist \
              --dateafter "$WINDOW" \
              --get-id \
              --match-filter "upload_date>=00000000" \
              "$ch" | head -n "$MAX_PER_CHANNEL" >> ids_${{ matrix.category }}.txt || true
          done < channels_${{ matrix.category }}.txt
          sort -u ids_${{ matrix.category }}.txt -o ids_${{ matrix.category }}.txt
          echo "Found $(wc -l < ids_${{ matrix.category }}.txt) total IDs for ${{ matrix.category }}"

      - name: Download captions (with timeouts)
        env:
          SOCKET_TIMEOUT: "15"
        run: |
          COUNT=0
          while read -r id; do
            [ -z "$id" ] && continue
            echo "Processing $id"
            # hard-stop any single video after 180s to avoid hangs
            timeout 180 yt-dlp "https://www.youtube.com/watch?v=${id}" \
              --skip-download \
              --write-auto-sub --write-subs --sub-langs "en.*" \
              --sub-format "vtt" \
              --retries 3 \
              --socket-timeout "$SOCKET_TIMEOUT" \
              -o "transcripts/${{ matrix.category }}/%(upload_date)s_%(channel)s_%(id)s.%(ext)s" || true
            COUNT=$((COUNT+1))
          done < ids_${{ matrix.category }}.txt
          echo "Tried caption download for $COUNT videos in ${{ matrix.category }}"

      - name: Convert VTT to text and stitch
        run: |
          CATEGORY_UPPER=$(echo "${{ matrix.category }}" | tr '[:lower:]' '[:upper:]')
          OUTMD="transcripts/${CATEGORY_UPPER}_COMPILED.md"
          {
            echo "# ${CATEGORY_UPPER} transcripts"
            echo "_Window:_ past 48h"
            echo "_Build:_ $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo
          } > "$OUTMD"

          shopt -s nullglob
          FILECOUNT=0
          for f in transcripts/${{ matrix.category }}/*.vtt; do
            FILECOUNT=$((FILECOUNT+1))
            echo "## $(basename "$f")" >> "$OUTMD"
            # strip headers, cue indexes, timestamps
            sed -E '/WEBVTT|Kind:|Language:/d; s/^[0-9]{1,3}$//; s/^([0-9:.,-> ]+)$//; /^\s*$/d' "$f" >> "$OUTMD"
            echo >> "$OUTMD"
          done

          if [ "$FILECOUNT" -eq 0 ]; then
            echo "_No caption files found (no uploads in window or captions disabled)._ " >> "$OUTMD"
          fi

          echo "Compiled $FILECOUNT file(s) into $OUTMD"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-${{ matrix.category }}
          path: |
            transcripts/${{ matrix.category }}/*.vtt
            transcripts/*_COMPILED.md
          if-no-files-found: warn

      - name: Commit results
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add -A transcripts
          git commit -m "Transcripts $(date -u +"%Y-%m-%dT%H:%M:%SZ") for ${{ matrix.category }}" || echo "Nothing to commit"
          git push || true
